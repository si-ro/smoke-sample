!function(e){var t={};function r(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,r),n.l=!0,n.exports}r.m=e,r.c=t,r.d=function(e,t,s){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(r.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)r.d(s,n,function(t){return e[t]}.bind(null,n));return s},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=30)}([function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(31);t.Events=s.Events;var n=r(32);t.Barrier=n.Barrier;var i=r(33);t.Semaphore=i.Semaphore},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(38);t.Buffer=s.Buffer},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(41);t.Writable=s.Writable;var n=r(42);t.Readable=n.Readable},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(63);t.HeaderProtocol=s.HeaderProtocol;var n=r(64);t.BodyProtocol=n.BodyProtocol},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(58);t.Sockets=s.Sockets;var n=r(22);t.SocketServer=n.SocketServer;var i=r(9);t.Socket=i.Socket;var a=r(59);t.NetworkStream=a.NetworkStream},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(0);t.Barrier=s.Barrier,t.Events=s.Events,t.Semaphore=s.Semaphore;var n=r(11);t.QueryString=n.QueryString;var i=r(35);t.Path=i.Path;var a=r(6);t.Url=a.Url;var o=r(1);t.Buffer=o.Buffer;var c=r(2);t.Readable=c.Readable,t.Writable=c.Writable;var h=r(7);t.Queryable=h.Queryable;var u=r(12);t.System=u.System;var l=r(13);t.Database=l.Database;var f=r(47);t.Bucket=f.Bucket;var d=r(16);t.PageHub=d.PageHub,t.NetworkHub=d.NetworkHub;var p=r(21);t.Network=p.Network;var w=r(4);t.Sockets=w.Sockets,t.SocketServer=w.SocketServer,t.Socket=w.Socket,t.NetworkStream=w.NetworkStream;var b=r(23);t.Rest=b.Rest,t.Fetch=b.Fetch,t.FetchRequest=b.FetchRequest,t.FetchResponse=b.FetchResponse,t.Router=b.Router,t.Route=b.Route,t.RestServer=b.RestServer,t.RestRequest=b.RestRequest,t.RestResponse=b.RestResponse;var y=r(67);t.Node=y.Node},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(37);t.Url=s.Url},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(43);t.Queryable=s.Queryable},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.FileStore="files",t.BlobStore="blobs"},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(1),i=1e6,a=32768,o=0,c=1;class h extends Error{constructor(){super("Received invalid socket message.")}}t.InvalidSocketMessage=h;class u extends Error{constructor(){super(`Message size exceeds ${i} bytes.`)}}t.MessageSendSizeTooLarge=u;class l extends Error{constructor(){super(`Message received exceeded ${i} bytes.`)}}t.MessageReceiveSizeTooLarge=l;const f=e=>e();class d extends s.Events{constructor(){super(...arguments),this.senders=[],this.buffers=[]}once(e,t){super.once(e,t)}on(e,t){super.on(e,t)}addTrack(e,t){this.senders.push(this.connection.addTrack(e,t))}send(e){const t=n.Buffer.from(e);if(t.length>i)throw new u;{let e=0;for(;e!==t.length;){const r=t.slice(e,e+a);(e+=r.length)!==t.length?this.channel.send(this.encode(c,r)):this.channel.send(this.encode(o,r))}}}close(){for(;this.senders.length>0;){const e=this.senders.shift();this.connection.removeTrack(e)}this.channel.close()}encode(e,t=n.Buffer.alloc(0)){return n.Buffer.concat([n.Buffer.from([e]),t])}decode(e){const t=n.Buffer.from(e);return[t.readInt8(0),t.slice(1)]}setupEvents(){this.connection.addEventListener("track",e=>this.emit("track",e)),this.channel.addEventListener("error",e=>this.emit("error",e)),this.channel.addEventListener("close",e=>this.emit("close",e)),this.channel.addEventListener("message",e=>{const[t,r]=this.decode(e.data);switch(this.buffers.push(r),this.buffers.reduce((e,t)=>e+t.length,0)>i&&(this.emit("error",new l),this.close()),t){case o:{const e=n.Buffer.concat(this.buffers);this.emit("message",{data:e}),this.buffers=[];break}case c:break;default:this.emit("error",new h),this.close()}})}static async fromChannel(e,t,r,s){t.binaryType="arraybuffer";const n=new d;return n.connection=e,n.channel=t,n.remote=s,n.local=r,n.buffers=[],n.setupEvents(),n}static createSocket(e,t,r){const s=new d;return f(async()=>{try{const[n,i]=await e.connect(t,r);s.connection=n.connection,s.channel=i,s.setupEvents(),s.emit("open")}catch(e){s.emit("error",e),s.emit("close")}}),s}}t.Socket=d},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(24);t.Router=s.Router,t.Route=s.Route;var n=r(25);t.RestRequest=n.RestRequest;var i=r(26);t.RestResponse=i.RestResponse;var a=r(65);t.RestServer=a.RestServer},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(34);t.QueryString=s.QueryString},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(44);t.System=s.System},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(14);t.Reader=s.Reader;var n=r(45);t.Database=n.Database},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=()=>{const e=window;return e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB};class n{constructor(){this.awaiters=[],this.running=!1}run(e){return new Promise((t,r)=>{this.awaiters.push({func:e,resolve:t,reject:r}),this.dispatch()})}async dispatch(){if(this.running||0===this.awaiters.length)return;const e=this.awaiters.shift();this.running=!0;try{e.resolve(await e.func()),setTimeout(()=>{this.running=!1,this.dispatch()},0)}catch(t){e.reject(t),setTimeout(()=>{this.running=!1,this.dispatch()},0)}}}class i{constructor(e){this.reader=e}async next(){const e=await this.reader.read();if(null===e){return{done:!0,value:null}}return{done:!1,value:e}}}t.ReaderAsyncIterator=i;class a{constructor(){this.deferreds=[],this.values=[],this.ended=!1}[Symbol.asyncIterator](){return new i(this)}resolve(){if(this.values.length>0&&this.deferreds.length>0){const e=this.deferreds.shift(),t=this.values.shift();return null!==t&&null===t.record&&(this.ended=!0),t.error?e.reject(t.error):e.resolve(t.record)}}write(e){this.values.push({record:e}),this.resolve()}error(e){this.values.push({error:e}),this.resolve()}read(){if(this.ended)return Promise.resolve(null);const e=new Promise((e,t)=>{this.deferreds.push({resolve:e,reject:t})});return this.resolve(),e}}t.Reader=a;class o{constructor(e){this.database=e,this.semaphore=new n}add(e){return this.semaphore.run(async()=>{for(const t of e){const e=this.database.name,r=this.database.version;this.stores().includes(t)||(this.database.close(),this.database=await o.open(e,{version:r+1,additions:[t],removals:[]}))}})}remove(e){return this.semaphore.run(async()=>{for(const t of e){const e=this.database.name,r=this.database.version;this.stores().includes(t)&&(this.database.close(),this.database=await o.open(e,{version:r+1,additions:[],removals:[t]}))}})}name(){return this.database.name}version(){return this.database.version}stores(){const e=[];for(let t=0;t<this.database.objectStoreNames.length;t++)e.push(this.database.objectStoreNames[t]);return e}get(e,t){return this.semaphore.run(()=>new Promise((r,s)=>{const n=this.database.transaction([e],"readonly").objectStore(e).get(t);n.addEventListener("success",()=>r(n.result)),n.addEventListener("error",()=>s(n.error))}))}count(e){return this.semaphore.run(()=>new Promise((t,r)=>{const s=this.database.transaction([e],"readonly").objectStore(e).count();s.addEventListener("success",()=>t(s.result)),s.addEventListener("error",()=>r(s.error))}))}read(e){const t=new a,r=this.database.transaction([e],"readonly");r.addEventListener("error",()=>t.error(r.error)),r.addEventListener("complete",()=>t.write(null));const s=r.objectStore(e).openCursor();return s.addEventListener("error",()=>t.error(s.error)),s.addEventListener("success",e=>{const r=e.target.result;r&&(t.write(r.value),r.continue())}),t}transactUpdateRecordCursors(e,t,r){return new Promise((s,n)=>{const i=e.objectStore(t).openCursor();i.addEventListener("error",()=>n(e.error)),i.addEventListener("success",e=>{const t=e.target.result;if(null!==t){for(const e of r)if(e.key===t.key)return t.update(e),void t.continue();t.continue()}else s()})})}transactUpdateRecords(e,t){return Promise.all([...t.keys()].map(r=>{const s=t.get(r);return this.transactUpdateRecordCursors(e,r,s)}))}transactInsertRecords(e,t){for(const r of t.keys()){const s=e.objectStore(r);t.get(r).forEach(e=>s.add(e))}}transactDeleteRecords(e,t){for(const r of t.keys()){const s=e.objectStore(r);t.get(r).forEach(e=>s.delete(e.key))}}transact(e){return this.semaphore.run(()=>new Promise(async(t,r)=>{const s=[...e.inserts.keys(),...e.deletes.keys(),...e.updates.keys()].filter((e,t,r)=>r.indexOf(e)===t);if(0===s.length)return void t();const n=this.database.transaction(s,"readwrite");n.addEventListener("error",e=>r(e.target.error)),n.addEventListener("complete",()=>t()),[...e.inserts.keys()].length>0&&this.transactInsertRecords(n,e.inserts),[...e.updates.keys()].length>0&&await this.transactUpdateRecords(n,e.updates),[...e.deletes.keys()].length>0&&this.transactDeleteRecords(n,e.deletes)}))}close(){this.database.close()}static open(e,t={additions:[],removals:[]}){return new Promise((r,n)=>{const i=s().open(e,t.version);i.addEventListener("error",()=>n(i.error)),i.addEventListener("success",()=>r(i.result)),i.addEventListener("upgradeneeded",()=>{const e=i.result;t.additions.forEach(t=>e.createObjectStore(t,{keyPath:"key"})),t.removals.forEach(t=>e.deleteObjectStore(t))})})}static async connect(e){const t=await o.open(e);return new o(t)}static drop(e){return new Promise((t,r)=>{const n=s().deleteDatabase(e);n.addEventListener("error",()=>r(n.error)),n.addEventListener("success",()=>t())})}}t.IDBDriver=o},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.FileNotFoundError=class extends Error{constructor(e){super(`File '${e}' not found`)}};t.BlobNotFound=class extends Error{constructor(e,t){super(`Blob '${t}' not found for file '${e}'`)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(17);t.PageHubServer=s.PageHubServer;var n=r(17);t.PageHub=n.PageHub;var i=r(55);t.NetworkHub=i.NetworkHub},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(51);t.PageHubServer=s.PageHubServer;var n=r(54);t.PageHub=n.PageHub},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(52);t.Server=s.Server;const n=r(20);t.Socket=n.Socket,t.createServer=function(e){return new s.Server(e)},t.connect=function(e){return n.Socket.connect(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);t.Bus=new s.Events},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(19);class i extends s.Events{constructor(e,t){super(),this.sendFunction=e,this.closeFunction=t,this.disposed=!1}once(e,t){super.once(e,t)}on(e,t){super.on(e,t)}send(e){if(this.disposed)throw Error("cannot send to disposed socket.");this.sendFunction(e)}close(){this.dispose()}dispose(){this.disposed||(this.disposed=!0,this.closeFunction(),super.dispose())}static connect(e){let t;const r=new i(r=>setTimeout(()=>{n.Bus.emit(`${e}:${t}:server:message`,r)},0),()=>setTimeout(()=>{n.Bus.emit(`${e}:${t}:server:close`),r.dispose()},0)),s=setTimeout(()=>{r.emit("error",new Error("socket connect timeout")),r.emit("close"),r.dispose()},100);return setTimeout(()=>{n.Bus.emit(`${e}:server:connect`),n.Bus.once(`${e}:client:connect`,i=>{t=i,clearTimeout(s),n.Bus.on(`${e}:${t}:client:message`,e=>{r.emit("message",{data:e})}),n.Bus.on(`${e}:${t}:client:close`,()=>{r.emit("close"),r.dispose()}),r.emit("open")})}),r}}t.Socket=i},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(57);t.Network=s.Network},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(9);t.SocketServer=class{constructor(e,t){this.net=e,this.func=t,this.listening=!1,this.disposed=!1}listen(e){return this.port=e.toString(),this.net.bindPort(this.port,e=>this.onChannel(e)),this.listening=!0,this}dispose(){!this.disposed&&this.listening&&(this.net.unbindPort(this.port),this.disposed=!0)}async onChannel(e){const[t,r]=e;return this.func(await s.Socket.fromChannel(t.connection,r,t.local,t.remote))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(60);t.Rest=s.Rest;var n=r(27);t.Fetch=n.Fetch,t.FetchRequest=n.FetchRequest,t.FetchResponse=n.FetchResponse;var i=r(10);t.Router=i.Router,t.Route=i.Route;var a=r(10);t.RestServer=a.RestServer,t.RestRequest=a.RestRequest,t.RestResponse=a.RestResponse},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(11),n=r(6),i=r(61),a=r(62);class o{constructor(e,t,r,s){this.method=e,this.pattern=t,this.middleware=r,this.handler=s}handle(e,t,r){const a=n.Url.parse(e.url),o=this.pattern.match(a.pathname);if(o&&e.method===this.method)return e.params=o,e.path=a.path,e.query=s.QueryString.parse(e.url),i.runStack([...this.middleware],e,t,()=>this.handler(e,t));r()}}t.Route=o;t.Router=class{constructor(){this.middleware=[]}get(...e){return this.method.apply(this,["get",...e])}post(...e){return this.method.apply(this,["post",...e])}put(...e){return this.method.apply(this,["put",...e])}patch(...e){return this.method.apply(this,["patch",...e])}delete(...e){return this.method.apply(this,["delete",...e])}method(...e){if(4===e.length){const[t,r,s,n]=e,c=s.map(e=>i.asMiddleware(e));return this.use(new o(t,new a.Pattern(r),c,n))}if(3===e.length){const[t,r,s]=e;return this.use(new o(t,new a.Pattern(r),[],s))}throw Error("invalid argument")}use(e){if("function"==typeof e){const t=e;this.middleware.push({handle:t})}else this.middleware.push(e);return this}handle(e,t,r){i.runStack([...this.middleware],e,t,()=>r())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),n=r(3);t.InvalidRequestError=class extends Error{constructor(e){super(e)}};t.ReadRequestError=class extends Error{constructor(e){super(e)}};t.RestRequest=class{constructor(e,t){this.stream=e,this.header=t,this.local=this.stream.socket.local,this.remote=this.stream.socket.remote,this.url=t.url,this.headers=t.headers,this.method=t.method,this.path="",this.query={},this.params={}}readable(){return n.BodyProtocol.readReadable(this.stream)}async buffer(){const e=[];for await(const t of this.readable())e.push(t);return s.Buffer.concat(e)}async text(e){return(await this.buffer()).toString(e)}async json(){const e=await this.buffer();return JSON.parse(e.toString("utf-8"))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),n=r(2),i=r(3);class a{constructor(e){this.stream=e,this.streaming=!0,this.transmit()}dispose(){this.streaming=!1}async delay(e){return new Promise(t=>setTimeout(t,e))}async transmit(){for(;this.streaming;)await this.stream.writable.write(s.Buffer.from([1])),await this.delay(100);await this.stream.writable.close()}}t.MediaStreamContext=a;class o extends Error{constructor(){super("Responses can only be sent once.")}}t.ResponseAlreadySentError=o;t.RestResponse=class{constructor(e){this.stream=e,this.headers={},this.status=200,this.sent=!1}async mediastream(e,t){if(this.sent)throw new o;return this.sent=!0,this.status=t||this.status,await i.HeaderProtocol.writeResponseHeader(this.stream,{status:this.status,headers:this.headers}),await i.BodyProtocol.writeMediaStream(this.stream,e),new a(this.stream)}async readable(e,t){if(this.sent)throw new o;this.sent=!0,this.status=t||this.status,await i.HeaderProtocol.writeResponseHeader(this.stream,{status:this.status,headers:this.headers}),await i.BodyProtocol.writeReadable(this.stream,e),await this.stream.writable.close()}async query(e,t){if(this.sent)throw new o;this.sent=!0,this.status=t||this.status,await i.HeaderProtocol.writeResponseHeader(this.stream,{status:this.status,headers:this.headers}),await i.BodyProtocol.writeQueryable(this.stream,e),await this.stream.writable.close()}async buffer(e,t){const r=[e];return this.readable(new n.Readable({pull:async e=>{r.length>0?e.enqueue(r.shift()):e.close()}}),t)}async send(e,t){return this.buffer(s.Buffer.from(e),t)}async text(e,t){return this.headers["Content-Type"]="text/plain",this.buffer(s.Buffer.from(e),t)}async json(e,t){this.headers["Content-Type"]="application/json";const r=s.Buffer.from(JSON.stringify(e));return this.buffer(r,t)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(28);t.FetchRequest=s.FetchRequest;var n=r(29);t.FetchResponse=n.FetchResponse;var i=r(66);t.Fetch=i.Fetch},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(3);t.FetchRequest=class{constructor(e,t,r){this.stream=e,this.header=t,this.body=r}async getResponse(){return await s.HeaderProtocol.writeRequestHeader(this.stream,this.header),s.BodyProtocol.writeReadable(this.stream,this.body,{ignoreError:!0}),s.HeaderProtocol.readResponseHeader(this.stream)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),n=r(3);t.FetchResponse=class{constructor(e,t){this.stream=e,this.response=t,this.headers=this.response.headers,this.status=this.response.status}readable(){return n.BodyProtocol.readReadable(this.stream)}query(){return n.BodyProtocol.readQueryable(this.stream)}mediastream(){return n.BodyProtocol.readMediaStream(this.stream)}async buffer(){const e=[];for await(const t of this.readable())e.push(t);return s.Buffer.concat(e)}async text(e){return(await this.buffer()).toString(e)}async json(){const e=await this.buffer();return JSON.parse(e.toString("utf-8"))}}},function(e,t,r){"use strict";r.r(t);var s=r(5),n=function(e,t,r,s){return new(r||(r=Promise))(function(n,i){function a(e){try{c(s.next(e))}catch(e){i(e)}}function o(e){try{c(s.throw(e))}catch(e){i(e)}}function c(e){e.done?n(e.value):new r(function(t){t(e.value)}).then(a,o)}c((s=s.apply(e,t||[])).next())})},i=function(e,t){var r,s,n,i,a={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,s&&(n=2&i[0]?s.return:i[0]?s.throw||((n=s.return)&&n.call(s),0):s.next)&&!(n=n.call(s,i[1])).done)return n;switch(s=0,n&&(i=[2&i[0],n.value]),i[0]){case 0:case 1:n=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,s=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(n=(n=a.trys).length>0&&n[n.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!n||i[1]>n[0]&&i[1]<n[3])){a.label=i[1];break}if(6===i[0]&&a.label<n[1]){a.label=n[1],n=i;break}if(n&&a.label<n[2]){a.label=n[2],a.ops.push(i);break}n[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],s=0}finally{r=n=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},a=new s.Node,o=new s.Node,c=new s.Node;a.rest.createServer().get("/mediastream",function(e,t){console.log("node0");var r=a.media.createTestPattern();t.mediastream(r)}).listen(80),o.rest.createServer().get("/mediastream",function(e,t){return n(void 0,void 0,void 0,function(){var e,r,s;return i(this,function(n){switch(n.label){case 0:return console.log("node1"),[4,o.rest.fetch("rest://0.0.0.1/mediastream")];case 1:return e=n.sent(),s=(r=t).mediastream,[4,e.mediastream()];case 2:return s.apply(r,[n.sent()]),[2]}})})}).listen(80),n(void 0,void 0,void 0,function(){var e,t,r;return i(this,function(s){switch(s.label){case 0:return console.log("node2"),[4,c.rest.fetch("rest://0.0.0.2/mediastream")];case 1:return e=s.sent(),t=document.getElementById("video-0"),r=t,[4,e.mediastream()];case 2:return r.srcObject=s.sent(),t.play(),[2]}})})},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(){this.handlers=[],this.messages=[]}once(e){this.handlers.push({once:!0,func:e}),this.dispatch()}on(e){this.handlers.push({once:!1,func:e}),this.dispatch()}remove(e){this.handlers=this.handlers.filter(t=>t.func!=e)}emit(e){this.messages.push(e),this.dispatch()}dispatch(){for(;this.messages.length>0&&this.handlers.length>0;){const e=this.messages.shift(),t=this.handlers.filter(e=>e.once),r=this.handlers.filter(e=>!e.once);this.handlers=[...r],t.forEach(t=>t.func(e)),r.forEach(t=>t.func(e))}}dispose(){for(;this.handlers.length>0;)this.handlers.shift();for(;this.messages.length>0;)this.messages.shift()}}t.Events=class{constructor(){this.events=new Map}once(e,t){this.events.has(e)||this.events.set(e,new s),this.events.get(e).once(t)}on(e,t){this.events.has(e)||this.events.set(e,new s),this.events.get(e).on(t)}remove(e,t){this.events.has(e)||this.events.set(e,new s),this.events.get(e).remove(t)}emit(e,t){if("error"===e&&!this.events.has(e))throw t;this.events.has(e)||this.events.set(e,new s),this.events.get(e).emit(t)}dispose(){for(const e of this.events.keys()){const t=this.events.get(e);this.events.delete(e),t.dispose()}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Barrier=class{constructor(){this.awaiters=[],this.paused=!0}pause(){this.paused=!0}resume(){this.paused=!1,this.dispatch()}run(e){return this.paused?new Promise((t,r)=>{this.awaiters.push({func:e,resolve:t,reject:r})}):Promise.resolve(e())}async dispatch(){for(;this.awaiters.length>0;){const e=this.awaiters.shift();Promise.resolve(e.func()).then(t=>e.resolve(t)).catch(t=>e.reject(t))}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Semaphore=class{constructor(e=1){this.concurrency=e,this.awaiters=[],this.running=0}run(e){return new Promise((t,r)=>{this.awaiters.push({func:e,resolve:t,reject:r}),this.dispatch()})}async dispatch(){if(0===this.awaiters.length||this.running>=this.concurrency)return;const e=this.awaiters.shift();this.running+=1;try{e.resolve(await e.func()),setTimeout(()=>{this.running-=1,this.dispatch()},1)}catch(t){e.reject(t),setTimeout(()=>{this.running-=1,this.dispatch()},1)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.QueryString=class{static parseQuerySegments(e){const t=[];for(let r=0;r<e.length;r++){const s=e.charAt(r);if("#"===s)break;"?"===s&&t.push(r)}const r=[];for(let s=0;s<t.length;s++)r.push(e.slice(t[s]+1,t[s+1]));return r}static parsePairs(e){return e.split("&").map(e=>e.split("=")).filter(e=>""!==e[0]).map(e=>[e[0],e[1]||""])}static expandResult(e){const t={};for(const[r,s]of e)void 0===t[r]&&(t[r]=[]),t[r]=[...t[r],s];return t}static collapseResult(e){for(const t of Object.keys(e)){let r=e[t];(r=r.filter((e,t,r)=>r.indexOf(e)===t)).length>1&&(r=r.filter(e=>e.length>0)),1===r.length?e[t]=r[0]:e[t]=r}return e}static parse(e){const t=this.parseQuerySegments(e).map(e=>this.parsePairs(e)).flatMap(e=>e),r=this.expandResult(t);return this.collapseResult(r)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(36);t.Path=s.Path},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{static basename(e,t){var r=this.posixSplitPath(e)[2];return t&&r.substr(-1*t.length)===t&&(r=r.substr(0,r.length-t.length)),r}static dirname(e){const t=this.posixSplitPath(e),r=t[0];let s=t[1];return r||s?(s&&(s=s.substr(0,s.length-1)),r+s):"."}static extname(e){return this.posixSplitPath(e)[3]}static format(e){if("object"!=typeof e)throw new TypeError(`Parameter 'pathObject' must be an object, not ${typeof e}`);if("string"!=typeof(e.root||""))throw new TypeError(`'pathObject.root' must be a string or undefined, not ${typeof e.root}`);return(e.dir?e.dir+this.sep:"")+(e.base||"")}static isAbsolute(e){return"/"===e.charAt(0)}static join(...e){let t="";for(let r=0;r<e.length;r++){const s=e[r];if("string"!=typeof s)throw new TypeError("Arguments to path.join must be strings");s&&(t+=t?"/"+s:s)}return this.normalize(t)}static normalize(e){const t=this.isAbsolute(e),r=e&&"/"===e[e.length-1];return(e=this.normalizeArray(e.split("/"),!t).join("/"))||t||(e="."),e&&r&&(e+="/"),(t?"/":"")+e}static parse(e){if("string"!=typeof e)throw new TypeError(`Parameter 'pathString' must be a string, not ${typeof e}`);let t=this.posixSplitPath(e);if(!t||4!==t.length)throw new TypeError(`Invalid path '${e}'`);return t[1]=t[1]||"",t[2]=t[2]||"",t[3]=t[3]||"",{root:t[0],dir:t[0]+t[1].slice(0,-1),base:t[2],ext:t[3],name:t[2].slice(0,t[2].length-t[3].length)}}static relative(e,t){e=this.resolve(e).substr(1),t=this.resolve(t).substr(1);const r=this.trimArray(e.split("/")),s=this.trimArray(t.split("/")),n=Math.min(r.length,s.length);let i=n;for(let e=0;e<n;e++)if(r[e]!==s[e]){i=e;break}let a=[];for(let e=i;e<r.length;e++)a.push("..");return(a=a.concat(s.slice(i))).join("/")}static resolve(...e){let t="",r=!1;for(let s=e.length-1;s>=-1&&!r;s--){let n=s>=0?e[s]:this.cwd;if("string"!=typeof n)throw new TypeError("Arguments to path.resolve must be strings");n&&(t=n+"/"+t,r="/"===n[0])}return(r?"/":"")+(t=this.normalizeArray(t.split("/"),!r).join("/"))||"."}static posixSplitPath(e){return this.splitPathPattern.exec(e).slice(1)}static normalizeArray(e,t){const r=[];for(let s=0;s<e.length;s++){const n=e[s];n&&"."!==n&&(".."===n?r.length&&".."!==r[r.length-1]?r.pop():t&&r.push(".."):r.push(n))}return r}static trimArray(e){const t=e.length-1;let r=0;for(;r<=t&&!e[r];r++);let s=t;for(;s>=0&&!e[s];s--);return 0===r&&s===t?e:r>s?[]:e.slice(r,s+1)}}s.splitPathPattern=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,s.sep="/",s.delimiter=":",s.cwd="/",t.Path=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Url=class{static parseProtocol(e){for(let t=0;t<e.length;t++)if(":"===e.charAt(t)){const r=e.charAt(t+1),s=e.charAt(t+2);if("/"===r&&"/"===s)return[e.slice(0,t+1),e.slice(t+3)]}return[null,e]}static parseAuth(e){for(let t=0;t<e.length;t++){if("/"===e.charAt(t))return[null,e];if("@"===e.charAt(t))return[e.slice(0,t),e.slice(t+1)]}return[null,e]}static parseHostname(e){for(let t=0;t<e.length;t++){const r=e.charAt(t);if("/"===r||"?"===r||"#"===r)return[e.slice(0,t),e.slice(t)]}return[e,""]}static parseHost(e){for(let t=0;t<e.length;t++)if(":"===e.charAt(t))return[e.slice(0,t),e.slice(t)];return[e,""]}static parsePort(e){for(let t=0;t<e.length;t++)if(":"===e.charAt(t))return[e.slice(t+1),""];return[null,e]}static parsePath(e){return 0===e.length?["/",""]:[e,""]}static parsePathname(e){for(let t=0;t<e.length;t++){const r=e.charAt(t);if("?"===r||"#"===r)return[e.slice(0,t),e.slice(t)]}return[e,""]}static parseHash(e){for(let t=0;t<e.length;t++)if("#"===e.charAt(t))return[e.slice(t),e.slice(0,t)];return[null,e]}static parseSearch(e){for(let t=0;t<e.length;t++)if("?"===e.charAt(t))return[e.slice(t),e.slice(0,t)];return["",e]}static parseQuery(e){for(let t=0;t<e.length;t++)if("?"===e.charAt(t))return[e.slice(t+1),e.slice(0,t)];return["",e]}static parse(e){const[t,r]=this.parseProtocol(e);if(t){const[s,n]=this.parseAuth(r),[i,a]=this.parseHostname(n),[o,c]=this.parseHost(i),[h,u]=this.parsePort(i),[l,f]=this.parsePath(a),[d,p]=this.parsePathname(l),[w,b]=this.parseHash(l),[y,m]=this.parseSearch(b),[g,v]=this.parseQuery(y);return{protocol:t,auth:s,hash:w,host:o,hostname:i,href:e,path:l,pathname:d,port:h,query:g,search:y}}{const s=null,n=null,i=null,a=null,[o,c]=this.parsePath(r),[h,u]=this.parsePathname(o),[l,f]=this.parseHash(o),[d,p]=this.parseSearch(f),[w,b]=this.parseQuery(d);return{protocol:t,auth:s,hash:l,host:i,hostname:n,href:e,path:o,pathname:h,port:a,query:w,search:d}}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(39),n=r(40),i=4096,a=/[^+\/0-9A-Za-z-_]/g,o=50,c=2147483647;class h extends Uint8Array{static swap(e,t,r){const s=e[t];e[t]=e[r],e[r]=s}swap16(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)h.swap(this,t,t+1);return this}swap32(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)h.swap(this,t,t+3),h.swap(this,t+1,t+2);return this}swap64(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)h.swap(this,t,t+7),h.swap(this,t+1,t+6),h.swap(this,t+2,t+5),h.swap(this,t+3,t+4);return this}slowToString(...e){let t=!1;if((void 0===e[1]||e[1]<0)&&(e[1]=0),e[1]>this.length)return"";if((void 0===e[2]||e[2]>this.length)&&(e[2]=this.length),e[2]<=0)return"";if(e[2]>>>=0,e[1]>>>=0,e[2]<=e[1])return"";for(e[0]||(e[0]="utf8");;)switch(e[0]){case"hex":return h.hexSlice(this,e[1],e[2]);case"utf8":case"utf-8":return h.utf8Slice(this,e[1],e[2]);case"ascii":return h.asciiSlice(this,e[1],e[2]);case"latin1":case"binary":return h.latin1Slice(this,e[1],e[2]);case"base64":return h.base64Slice(this,e[1],e[2]);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h.utf16leSlice(this,e[1],e[2]);default:if(t)throw new TypeError("Unknown encoding: "+e[0]);e[0]=(e[0]+"").toLowerCase(),t=!0}}toString(...e){const t=this.length;return 0===t?"":0===e.length?h.utf8Slice(this,0,t):this.slowToString(...e)}toLocaleString(...e){return this.toString(...e)}equals(e){if(!h.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===h.compare(this,e)}inspect(){let e="";const t=o;return e=this.toString("hex",0,t).replace(/(.{2})/g,"$1 ").trim(),this.length>t&&(e+=" ... "),"<Buffer "+e+">"}compare(...e){if(h.isInstance(e[0],Uint8Array)&&(e[0]=h.from(e[0],e[0].offset,e[0].byteLength)),!h.isBuffer(e[0]))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e[0]);if(void 0===e[1]&&(e[1]=0),void 0===e[2]&&(e[2]=e[0]?e[0].length:0),void 0===e[3]&&(e[3]=0),void 0===e[4]&&(e[4]=this.length),e[1]<0||e[2]>e[0].length||e[3]<0||e[4]>this.length)throw new RangeError("out of range index");if(e[3]>=e[4]&&e[1]>=e[2])return 0;if(e[3]>=e[4])return-1;if(e[1]>=e[2])return 1;if(e[1]>>>=0,e[2]>>>=0,e[3]>>>=0,e[4]>>>=0,this===e[0])return 0;let t=e[4]-e[3],r=e[2]-e[1];const s=Math.min(t,r),n=this.slice(e[3],e[4]),i=e[0].slice(e[1],e[2]);for(let e=0;e<s;++e)if(n[e]!==i[e]){t=n[e],r=i[e];break}return t<r?-1:r<t?1:0}static arrayIndexOf(e,t,r,s,n){let i,a=1,o=e.length,c=t.length;if(void 0!==s&&("ucs2"===(s=String(s).toLowerCase())||"ucs-2"===s||"utf16le"===s||"utf-16le"===s)){if(e.length<2||t.length<2)return-1;a=2,o/=2,c/=2,r/=2}function h(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(n){let s=-1;for(i=r;i<o;i++)if(h(e,i)===h(t,-1===s?0:i-s)){if(-1===s&&(s=i),i-s+1===c)return s*a}else-1!==s&&(i-=i-s),s=-1}else for(r+c>o&&(r=o-c),i=r;i>=0;i--){let r=!0;for(let s=0;s<c;s++)if(h(e,i+s)!==h(t,s)){r=!1;break}if(r)return i}return-1}static bidirectionalIndexOf(...e){if(0===e[0].length)return-1;if("string"==typeof e[2]?(e[3]=e[2],e[2]=0):e[2]>2147483647?e[2]=2147483647:e[2]<-2147483648&&(e[2]=-2147483648),e[2]=+e[2],h.numberIsNaN(e[2])&&(e[2]=e[4]?0:e[0].length-1),e[2]<0&&(e[2]=e[0].length+e[2]),e[2]>=e[0].length){if(e[4])return-1;e[2]=e[0].length-1}else if(e[2]<0){if(!e[4])return-1;e[2]=0}if("string"==typeof e[1]&&(e[1]=h.from(e[1],e[3])),h.isBuffer(e[1]))return 0===e[1].length?-1:h.arrayIndexOf(e[0],e[1],e[2],e[3],e[4]);if("number"==typeof e[1])return e[1]=255&e[1],"function"==typeof Uint8Array.prototype.indexOf?e[4]?Uint8Array.prototype.indexOf.call(e[0],e[1],e[2]):Uint8Array.prototype.lastIndexOf.call(e[0],e[1],e[2]):h.arrayIndexOf(e[0],[e[1]],e[2],e[3],e[4]);throw new TypeError("val must be string, number or Buffer")}indexOf(e,t,r){return h.bidirectionalIndexOf(this,e,t,r,!0)}lastIndexOf(e,t,r){return h.bidirectionalIndexOf(this,e,t,r,!1)}includes(e,t,r){return-1!==this.indexOf(e,t,r)}toJSON(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}}static base64Slice(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}static utf8Slice(e,t,r){r=Math.min(e.length,r);const s=[];let n=t;for(;n<r;){const t=e[n];let i=null,a=t>239?4:t>223?3:t>191?2:1;if(n+a<=r){let r,s,o,c;switch(a){case 1:t<128&&(i=t);break;case 2:128==(192&(r=e[n+1]))&&(c=(31&t)<<6|63&r)>127&&(i=c);break;case 3:r=e[n+1],s=e[n+2],128==(192&r)&&128==(192&s)&&(c=(15&t)<<12|(63&r)<<6|63&s)>2047&&(c<55296||c>57343)&&(i=c);break;case 4:r=e[n+1],s=e[n+2],o=e[n+3],128==(192&r)&&128==(192&s)&&128==(192&o)&&(c=(15&t)<<18|(63&r)<<12|(63&s)<<6|63&o)>65535&&c<1114112&&(i=c)}}null===i?(i=65533,a=1):i>65535&&(i-=65536,s.push(i>>>10&1023|55296),i=56320|1023&i),s.push(i),n+=a}return h.decodeCodePointsArray(s)}static decodeCodePointsArray(e){const t=e.length;if(t<=i)return String.fromCharCode.apply(String,e);let r="",s=0;for(;s<t;)r+=String.fromCharCode.apply(String,e.slice(s,s+=i));return r}static asciiSlice(e,t,r){let s="";r=Math.min(e.length,r);for(let n=t;n<r;++n)s+=String.fromCharCode(127&e[n]);return s}static latin1Slice(e,t,r){let s="";r=Math.min(e.length,r);for(let n=t;n<r;++n)s+=String.fromCharCode(e[n]);return s}static hexSlice(e,t,r){const s=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>s)&&(r=s);let n="";for(let s=t;s<r;++s)n+=h.toHex(e[s]);return n}static utf16leSlice(e,t,r){const s=e.slice(t,r);let n="";for(let e=0;e<s.length;e+=2)n+=String.fromCharCode(s[e]+256*s[e+1]);return n}slice(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);let s=this.subarray(e,t);return s.__proto__=h.prototype,s}copy(e,t,r,s){if(!h.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),s||0===s||(s=this.length),t>=e.length&&(t=e.length),t||(t=0),s>0&&s<r&&(s=r),s===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(s<0)throw new RangeError("sourceEnd out of bounds");s>this.length&&(s=this.length),e.length-t<s-r&&(s=e.length-t+r);const n=s-r;if(this===e&&"function"==typeof Uint8Array.prototype.copyWithin)this.copyWithin(t,r,s);else if(this===e&&r<t&&t<s)for(let s=n-1;s>=0;--s)e[s+t]=this[s+r];else Uint8Array.prototype.set.call(e,this.subarray(r,s),t);return n}fill(...e){if("string"==typeof e[0]){if("string"==typeof e[1]?(e[3]=e[1],e[1]=0,e[2]=this.length):"string"==typeof e[2]&&(e[3]=e[2],e[2]=this.length),void 0!==e[3]&&"string"!=typeof e[3])throw new TypeError("encoding must be a string");if("string"==typeof e[3]&&!h.isEncoding(e[3]))throw new TypeError("Unknown encoding: "+e[3]);if(1===e[0].length){const t=e[0].charCodeAt(0);("utf8"===e[3]&&t<128||"latin1"===e[3])&&(e[0]=t)}}else"number"==typeof e[0]&&(e[0]=255&e[0]);if(e[1]<0||this.length<e[1]||this.length<e[2])throw new RangeError("Out of range index");if(e[2]<=e[1])return this;let t;if(e[1]=e[1]>>>0,e[2]=void 0===e[2]?this.length:e[2]>>>0,e[0]||(e[0]=0),"number"==typeof e[0])for(t=e[1];t<e[2];++t)this[t]=e[0];else{const r=h.isBuffer(e[0])?e[0]:h.from(e[0],e[3]),s=r.length;if(0===s)throw new TypeError('The value "'+e[0]+'" is invalid for argument "value"');for(t=0;t<e[2]-e[1];++t)this[t+e[1]]=r[t%s]}return this}static checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond Buffer length")}readUIntLE(e,t,r){e>>>=0,t>>>=0,r||h.checkOffset(e,t,this.length);let s=this[e],n=1,i=0;for(;++i<t&&(n*=256);)s+=this[e+i]*n;return s}readUIntBE(e,t,r){e>>>=0,t>>>=0,r||h.checkOffset(e,t,this.length);let s=this[e+--t],n=1;for(;t>0&&(n*=256);)s+=this[e+--t]*n;return s}readUInt8(e,t){return e>>>=0,t||h.checkOffset(e,1,this.length),this[e]}readUInt16LE(e,t){return e>>>=0,t||h.checkOffset(e,2,this.length),this[e]|this[e+1]<<8}readUInt16BE(e,t){return e>>>=0,t||h.checkOffset(e,2,this.length),this[e]<<8|this[e+1]}readUInt32LE(e,t){return e>>>=0,t||h.checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]}readUInt32BE(e,t){return e>>>=0,t||h.checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])}readIntLE(e,t,r){e>>>=0,t>>>=0,r||h.checkOffset(e,t,this.length);let s=this[e],n=1,i=0;for(;++i<t&&(n*=256);)s+=this[e+i]*n;return s>=(n*=128)&&(s-=Math.pow(2,8*t)),s}readIntBE(e,t,r){e>>>=0,t>>>=0,r||h.checkOffset(e,t,this.length);let s=t,n=1,i=this[e+--s];for(;s>0&&(n*=256);)i+=this[e+--s]*n;return i>=(n*=128)&&(i-=Math.pow(2,8*t)),i}readInt8(e,t){return e>>>=0,t||h.checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]}readInt16LE(e,t){e>>>=0,t||h.checkOffset(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r}readInt16BE(e,t){e>>>=0,t||h.checkOffset(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r}readInt32LE(e,t){return e>>>=0,t||h.checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24}readInt32BE(e,t){return e>>>=0,t||h.checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]}readFloatLE(e,t){e>>>=0,t||h.checkOffset(e,4,this.length);return s.read(this,e,!0,23,4)}readFloatBE(e,t){e>>>=0,t||h.checkOffset(e,4,this.length);return s.read(this,e,!1,23,4)}readDoubleLE(e,t){e>>>=0,t||h.checkOffset(e,8,this.length);return s.read(this,e,!0,52,8)}readDoubleBE(e,t){e>>>=0,t||h.checkOffset(e,8,this.length);return s.read(this,e,!1,52,8)}static hexWrite(e,t,r,s){r=Number(r)||0;const n=e.length-r;s?(s=Number(s))>n&&(s=n):s=n;const i=t.length;s>i/2&&(s=i/2);for(var a=0;a<s;++a){const s=parseInt(t.substr(2*a,2),16);if(h.numberIsNaN(s))return a;e[r+a]=s}return a}static utf8Write(e,t,r,s){return h.blitBuffer(h.utf8ToBytes(t,e.length-r),e,r,s)}static asciiWrite(e,t,r,s){return h.blitBuffer(h.asciiToBytes(t),e,r,s)}static latin1Write(e,t,r,s){return h.asciiWrite(e,t,r,s)}static base64Write(e,t,r,s){return h.blitBuffer(h.base64ToBytes(t),e,r,s)}static ucs2Write(e,t,r,s){return h.blitBuffer(h.utf16leToBytes(t,e.length-r),e,r,s)}write(...e){if(void 0===e[1])e[3]="utf8",e[2]=this.length,e[1]=0;else if(void 0===e[2]&&"string"==typeof e[1])e[3]=e[1],e[2]=this.length,e[1]=0;else{if(!isFinite(e[1]))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e[1]=e[1]>>>0,isFinite(e[2])?(e[2]=e[2]>>>0,void 0===e[3]&&(e[3]="utf8")):(e[3]=e[2],e[2]=void 0)}const t=this.length-e[1];if((void 0===e[2]||e[2]>t)&&(e[2]=t),e[0].length>0&&(e[2]<0||e[1]<0)||e[1]>this.length)throw new RangeError("Attempt to write outside Buffer bounds");e[3]||(e[3]="utf8");let r=!1;for(;;)switch(e[3]){case"hex":return h.hexWrite(this,e[0],e[1],e[2]);case"utf8":case"utf-8":return h.utf8Write(this,e[0],e[1],e[2]);case"ascii":return h.asciiWrite(this,e[0],e[1],e[2]);case"latin1":case"binary":return h.latin1Write(this,e[0],e[1],e[2]);case"base64":return h.base64Write(this,e[0],e[1],e[2]);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return h.ucs2Write(this,e[0],e[1],e[2]);default:if(r)throw new TypeError("Unknown encoding: "+e[3]);e[3]=(""+e[3]).toLowerCase(),r=!0}}static checkInt(e,t,r,s,n,i){if(!h.isBuffer(e))throw new TypeError('"Buffer" argument must be a Buffer instance');if(t>n||t<i)throw new RangeError('"value" argument is out of bounds');if(r+s>e.length)throw new RangeError("Index out of range")}writeUIntLE(e,t,r,s){if(e=+e,t>>>=0,r>>>=0,!s){const s=Math.pow(2,8*r)-1;h.checkInt(this,e,t,r,s,0)}let n=1,i=0;for(this[t]=255&e;++i<r&&(n*=256);)this[t+i]=e/n&255;return t+r}writeUIntBE(e,t,r,s){if(e=+e,t>>>=0,r>>>=0,!s){const s=Math.pow(2,8*r)-1;h.checkInt(this,e,t,r,s,0)}let n=r-1,i=1;for(this[t+n]=255&e;--n>=0&&(i*=256);)this[t+n]=e/i&255;return t+r}writeUInt8(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,1,255,0),this[t]=255&e,t+1}writeUInt16LE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2}writeUInt16BE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2}writeUInt32LE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4}writeUInt32BE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4}writeIntLE(e,t,r,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*r-1);h.checkInt(this,e,t,r,s-1,-s)}let n=0,i=1,a=0;for(this[t]=255&e;++n<r&&(i*=256);)e<0&&0===a&&0!==this[t+n-1]&&(a=1),this[t+n]=(e/i>>0)-a&255;return t+r}writeIntBE(e,t,r,s){if(e=+e,t>>>=0,!s){const s=Math.pow(2,8*r-1);h.checkInt(this,e,t,r,s-1,-s)}let n=r-1,i=1,a=0;for(this[t+n]=255&e;--n>=0&&(i*=256);)e<0&&0===a&&0!==this[t+n+1]&&(a=1),this[t+n]=(e/i>>0)-a&255;return t+r}writeInt8(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1}writeInt16LE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2}writeInt16BE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2}writeInt32LE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4}writeInt32BE(e,t,r){return e=+e,t>>>=0,r||h.checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4}static checkIEEE754(e,t,r,s,n,i){if(r+s>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}static writeFloat(e,t,r,n,i){return t=+t,r>>>=0,i||h.checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),s.write(e,t,r,n,23,4),r+4}writeFloatLE(e,t,r){return h.writeFloat(this,e,t,!0,r)}writeFloatBE(e,t,r){return h.writeFloat(this,e,t,!1,r)}static writeDouble(e,t,r,n,i){return t=+t,r>>>=0,i||h.checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),s.write(e,t,r,n,52,8),r+8}writeDoubleLE(e,t,r){return h.writeDouble(this,e,t,!0,r)}writeDoubleBE(e,t,r){return h.writeDouble(this,e,t,!1,r)}static allocUnsafe(e){return h.assertSize(e),h.createBuffer(e<0?0:0|h.checked(e))}static alloc(e,t,r){return h.assertSize(e),e<=0?h.createBuffer(e):void 0!==t?"string"==typeof r?h.createBuffer(e).fill(t,r):h.createBuffer(e).fill(t):h.createBuffer(e)}static fromString(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!h.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|h.byteLength(e,t);let s=h.createBuffer(r);const n=s.write(e,t);return n!==r&&(s=s.slice(0,n)),s}static fromArrayLike(e){const t=e.length<0?0:0|h.checked(e.length),r=h.createBuffer(t);for(let s=0;s<t;s+=1)r[s]=255&e[s];return r}static fromArrayBuffer(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let s;const n=s=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r);return n.__proto__=h.prototype,n}static fromObject(e){if(h.isBuffer(e)){const t=0|h.checked(e.length),r=h.createBuffer(t);return 0===r.length?r:(e.copy(r,0,0,t),r)}if(void 0!==e.length)return"number"!=typeof e.length||h.numberIsNaN(e.length)?h.createBuffer(0):h.fromArrayLike(e);if("Buffer"===e.type&&Array.isArray(e.data))return h.fromArrayLike(e.data);throw TypeError("Unable create buffer from given object.")}static from(...e){if("string"==typeof e[0])return h.fromString(e[0],e[1]);if(ArrayBuffer.isView(e[0]))return h.fromArrayLike(e[0]);if(null==e[0])throw TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e[0]);if(h.isInstance(e[0],ArrayBuffer)||e[0]&&h.isInstance(e[0].buffer,ArrayBuffer))return h.fromArrayBuffer(e[0],e[1],e[2]);if("number"==typeof e[0])throw new TypeError('The "value" argument must not be of type number. Received type number');const t=e[0].valueOf&&e[0].valueOf();if(null!=t&&t!==e[0])return h.from(e[0],e[1],e[2]);const r=h.fromObject(e[0]);if(r)return r;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[0][Symbol.toPrimitive])return h.from(e[0][Symbol.toPrimitive]("string"),e[1],e[2]);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e[0])}static isBuffer(e){return e instanceof h}static byteLength(...e){if(h.isBuffer(e[0]))return e[0].length;if(ArrayBuffer.isView(e[0])||h.isInstance(e[0],ArrayBuffer))return e[0].byteLength;if("string"!=typeof e[0])throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e[0]);const t=e[0].length,r=e.length>2&&!0===e[2];if(!r&&0===t)return 0;let s=!1;for(;;)switch(e[1]){case"ascii":case"latin1":case"binary":return t;case"utf8":case"utf-8":return h.utf8ToBytes(e[0]).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*t;case"hex":return t>>>1;case"base64":return h.base64ToBytes(e[0]).length;default:if(s)return r?-1:h.utf8ToBytes(e[0]).length;e[1]=(""+e[1]).toLowerCase(),s=!0}}static compare(e,t){if(h.isInstance(e,Uint8Array)&&(e=h.from(e,e.byteOffset,e.byteLength)),h.isInstance(t,Uint8Array)&&(t=h.from(t,t.byteOffset,t.byteLength)),!h.isBuffer(e)||!h.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,s=t.length;for(let n=0,i=Math.min(r,s);n<i;++n)if(e[n]!==t[n]){r=e[n],s=t[n];break}return r<s?-1:s<r?1:0}static isEncoding(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}}static concat(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return h.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const s=h.allocUnsafe(t);let n=0;for(r=0;r<e.length;++r){let t=e[r];if(h.isInstance(t,Uint8Array)&&(t=h.from(t)),!h.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(s,n),n+=t.length}return s}static assertSize(e){if("number"!=typeof e)throw new TypeError("'size' argument must be of type number");if(e<0)throw new RangeError(`The value '${e}' is invalid for option "size"`)}static createBuffer(e){if(e>c)throw new RangeError('The value "'+e+'" is invalid for option "size"');return new h(e)}static checked(e){if(e>=c)throw new RangeError("Attempt to allocate Buffer larger than maximum "+`size: 0x${c.toString(16)} bytes`);return 0|e}static base64clean(e){if((e=(e=e.split("=")[0]).trim().replace(a,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}static toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}static utf8ToBytes(e,t){let r;t=t||1/0;const s=e.length;let n=null;const i=[];for(let a=0;a<s;++a){if((r=e.charCodeAt(a))>55295&&r<57344){if(!n){if(r>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===s){(t-=3)>-1&&i.push(239,191,189);continue}n=r;continue}if(r<56320){(t-=3)>-1&&i.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(t-=3)>-1&&i.push(239,191,189);if(n=null,r<128){if((t-=1)<0)break;i.push(r)}else if(r<2048){if((t-=2)<0)break;i.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;i.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return i}static asciiToBytes(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}static utf16leToBytes(e,t){let r,s,n;const i=[];for(let a=0;a<e.length&&!((t-=2)<0);++a)s=(r=e.charCodeAt(a))>>8,n=r%256,i.push(n),i.push(s);return i}static base64ToBytes(e){return n.toByteArray(h.base64clean(e))}static blitBuffer(e,t,r,s){for(var n=0;n<s&&!(n+r>=t.length||n>=e.length);++n)t[n+r]=e[n];return n}static isInstance(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}static numberIsNaN(e){return e!=e}}t.Buffer=h},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.read=function(e,t,r,s,n){let i,a;const o=8*n-s-1,c=(1<<o)-1,h=c>>1;let u=-7,l=r?n-1:0;const f=r?-1:1;let d=e[t+l];for(l+=f,i=d&(1<<-u)-1,d>>=-u,u+=o;u>0;i=256*i+e[t+l],l+=f,u-=8);for(a=i&(1<<-u)-1,i>>=-u,u+=s;u>0;a=256*a+e[t+l],l+=f,u-=8);if(0===i)i=1-h;else{if(i===c)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,s),i-=h}return(d?-1:1)*a*Math.pow(2,i-s)},t.write=function(e,t,r,s,n,i){let a,o,c,h=8*i-n-1;const u=(1<<h)-1,l=u>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0;let d=s?0:i-1;const p=s?1:-1,w=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(o=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-a))<1&&(a--,c*=2),(t+=a+l>=1?f/c:f*Math.pow(2,1-l))*c>=2&&(a++,c/=2),a+l>=u?(o=0,a=u):a+l>=1?(o=(t*c-1)*Math.pow(2,n),a+=l):(o=t*Math.pow(2,l-1)*Math.pow(2,n),a=0));n>=8;e[r+d]=255&o,d+=p,o/=256,n-=8);for(a=a<<n|o,h+=n;h>0;e[r+d]=255&a,d+=p,a/=256,h-=8);e[r+d-p]|=128*w}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";for(let e=0,t=a.length;e<t;++e)s[e]=a[e],n[a.charCodeAt(e)]=e;function o(e){const t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");let r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e){return s[e>>18&63]+s[e>>12&63]+s[e>>6&63]+s[63&e]}function h(e,t,r){let s;const n=[];for(let i=t;i<r;i+=3)s=(e[i]<<16&16711680)+(e[i+1]<<8&65280)+(255&e[i+2]),n.push(c(s));return n.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63,t.byteLength=function(e){const t=o(e),r=t[0],s=t[1];return 3*(r+s)/4-s},t.toByteArray=function(e){const t=o(e),r=t[0],s=t[1],a=new i(function(e,t){return 3*(e+t)/4-t}(r,s));let c,h=0;const u=s>0?r-4:r;for(var l=0;l<u;l+=4)c=n[e.charCodeAt(l)]<<18|n[e.charCodeAt(l+1)]<<12|n[e.charCodeAt(l+2)]<<6|n[e.charCodeAt(l+3)],a[h++]=c>>16&255,a[h++]=c>>8&255,a[h++]=255&c;return 2===s&&(c=n[e.charCodeAt(l)]<<2|n[e.charCodeAt(l+1)]>>4,a[h++]=255&c),1===s&&(c=n[e.charCodeAt(l)]<<10|n[e.charCodeAt(l+1)]<<4|n[e.charCodeAt(l+2)]>>2,a[h++]=c>>8&255,a[h++]=255&c),a},t.tripletToBase64=c,t.encodeChunk=h,t.fromByteArray=function(e){let t;const r=e.length,n=r%3,i=[];for(let t=0,s=r-n;t<s;t+=16383)i.push(h(e,t,t+16383>s?s:t+16383));return 1===n?(t=e[r-1],i.push(s[t>>2]+s[t<<4&63]+"==")):2===n&&(t=(e[r-2]<<8)+e[r-1],i.push(s[t>>10]+s[t>>4&63]+s[t<<2&63]+"=")),i.join("")}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0);t.Writable=class{constructor(e){this.sink=e,this.controller={},this.semaphore=new s.Semaphore(1),this.start()}async start(){if(this.sink.start)try{await this.semaphore.run(()=>this.sink.start(this.controller))}catch(e){throw this.error=e,e}}async write(e){if(void 0!==this.error)throw this.error;if(this.sink.write)try{await this.semaphore.run(()=>this.sink.write(e,this.controller))}catch(e){throw this.error=e,e}}async abort(e=new Error("abort")){if(void 0!==this.error)throw this.error;if(this.sink.abort)try{await this.semaphore.run(()=>this.sink.abort(e))}catch(e){throw this.error=e,e}}async close(){if(void 0!==this.error)throw this.error;if(this.sink.close)try{await this.semaphore.run(()=>this.sink.close())}catch(e){throw this.error=e,e}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.readable=e}async next(){return this.readable.read()}}t.ReadableAsyncIterator=s;t.Readable=class{constructor(e){this.stream=new ReadableStream(e),this.reader=this.stream.getReader()}[Symbol.asyncIterator](){return new s(this)}async read(){return this.reader.read()}cancel(){return this.reader.cancel()}async pipe(e){for(;;){const{done:t,value:r}=await this.read();if(t)return e.close();try{await e.write(r)}catch(t){throw await e.abort(t),t}}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.iterable=e}[Symbol.asyncIterator](){return async function*(e){for await(const t of e)yield t}(this.iterable)}concat(e){return new s(async function*(t){for await(const e of t)yield e;for await(const t of e.iterable)yield t}(this.iterable))}distinct(e){e=e||(e=>e);const t=[];return new s(async function*(r){for await(const s of r){const r=e(s);-1===t.indexOf(r)&&(t.push(r),yield s)}}(this.iterable))}async elementAt(e){return(await this.toArray())[e]}async first(){return(await this.toArray())[0]}async last(){const e=await this.toArray();return e[e.length-1]}ordering(e,t){return new s(async function*(r){const s=[];for await(const e of r)s.push(e);const n=s.sort((r,s)=>{const n=t(r),i=t(s);return"asc"===e?+(n>i)||+(n===i)-1:+(n<i)||+(n===i)-1});for(const e of n)yield e}(this.iterable))}orderBy(e){return this.ordering("asc",e)}orderByDescending(e){return this.ordering("desc",e)}reverse(){return new s(async function*(e){const t=[];for await(const r of e)t.push(r);for(let e=t.length-1;0!==e;e--)yield t[e]}(this.iterable))}select(e){return new s(async function*(t){let r=0;for await(const s of t)yield e(s,r++)}(this.iterable))}selectMany(e){return new s(async function*(t){let r=0;for await(const s of t)for await(const t of e(s,r++))yield t}(this.iterable))}skip(e){return new s(async function*(t){let r=0;for await(const s of t)r>=e&&(yield s),r+=1}(this.iterable))}take(e){return new s(async function*(t){let r=0;for await(const s of t)r<e&&(yield s),r+=1}(this.iterable))}where(e){return new s(async function*(t){let r=0;for await(const s of t)e(s,r++)&&(yield s)}(this.iterable))}async aggregate(e,t){return(await this.toArray()).reduce(e,t)}async all(e){return(await this.toArray()).every(e)}async average(e){const t=await this.toArray();return t.map(e).reduce((e,t)=>e+t,0)/t.length}async any(e){return(await this.toArray()).some(e)}async count(){let e=0;for await(const t of this.iterable)e+=1;return e}async sum(e){return(await this.toArray()).reduce((t,r,s)=>t+e(r,s),0)}async toArray(){const e=[];for await(const t of this.iterable)e.push(t);return e}}t.Queryable=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.System=class{constructor(e){this.net=e,this.started=new Date}uptime(){const e=this.started.getTime();return Date.now()-e}async getNetStat(e){const t=e.local,r=e.remote,s=e.loopback,n=e.connection.getTransceivers().length,i=e.connection.getSenders().length,a=await e.connection.getStats(),o={};return a.forEach(e=>{Object.keys(e).forEach(t=>{o[t]=e[t]})}),{local:t,remote:r,loopback:s,transceivers:n,senders:i,...o}}async netstat(){const e=this.net.getPeers(),t=[];for(const r of e.keys()){const s=e.get(r),n=await this.getNetStat(s);t.push(n)}return t}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(7),i=r(14),a=r(2),o=r(46);class c extends Error{constructor(e){super(e)}}t.KeyRequiredError=c;t.Database=class{constructor(e){this.barrier=new s.Barrier,this.transact={inserts:new Map,updates:new Map,deletes:new Map},this.connect(e)}async connect(e){this.driver=await i.IDBDriver.connect(e),this.barrier.resume()}name(){return this.barrier.run(()=>this.driver.name())}version(){return this.barrier.run(()=>this.driver.version())}stores(){return this.barrier.run(()=>this.driver.stores())}count(e){return this.barrier.run(()=>this.driver.stores().includes(e)?this.driver.count(e):0)}exists(e,t){return this.barrier.run(async()=>!!this.driver.stores().includes(e)&&void 0!==await this.driver.get(e,t))}get(e,t){return this.barrier.run(()=>this.driver.stores().includes(e)?this.driver.get(e,t):void 0)}insert(e,t){this.transact.inserts.has(e)||this.transact.inserts.set(e,[]),this.transact.inserts.get(e).push(t)}update(e,t){this.transact.updates.has(e)||this.transact.updates.set(e,[]),this.transact.updates.get(e).push(t)}delete(...e){const t=e[0],r="string"==typeof e[1]?{key:e[1]}:e[1];if(void 0===r.key)throw new c('Cannot delete record without "key" property.');this.transact.deletes.has(t)||this.transact.deletes.set(t,[]),this.transact.deletes.get(t).push(r)}drop(e){return this.barrier.run(()=>this.driver.remove([e]))}async commit(){return this.barrier.run(async()=>{const e=[...this.transact.inserts.keys(),...this.transact.updates.keys(),...this.transact.deletes.keys()];await this.driver.add(e),await this.driver.transact(this.transact),this.transact.inserts.clear(),this.transact.updates.clear(),this.transact.deletes.clear()})}query(e){return new n.Queryable(this.readable(e))}key(){return o.Key.create()}readable(e){let t;return new a.Readable({start:async r=>this.barrier.run(async()=>{this.driver.stores().includes(e)||r.close(),t=this.driver.read(e)}),pull:async e=>{const r=await t.read();null!==r?e.enqueue(r):e.close()}})}dispose(){return this.barrier.run(()=>this.driver.close())}static async drop(e){await i.IDBDriver.drop(e)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Key=class{static create(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(48);t.Bucket=s.Bucket},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),n=r(2),i=r(0),a=r(13),o=r(8),c=r(49),h=r(50),u=r(15);t.Bucket=class{constructor(e){this.dbname=e,this.database=new a.Database(this.dbname),this.semaphore=new i.Semaphore(1)}exists(e){return this.database.exists(o.FileStore,e)}info(e){return this.semaphore.run(async()=>this.database.query(o.FileStore).where(e=>void 0!==e).where(t=>e.includes(t.key)).select(e=>({key:e.key,created:e.created,updated:e.updated,size:e.size})).toArray())}list(e="",t){return this.semaphore.run(()=>this.database.query(o.FileStore).where(t=>0===t.key.indexOf(e)).where(r=>!r.key.replace(e,"").includes(t)).select(e=>e.key).toArray())}readable(e,t,r){const s=new c.Reader({database:this.database,semaphore:this.semaphore,key:e,start:t,end:r});return new n.Readable({start:()=>s.prepare(),pull:async e=>{try{const t=await s.read();t.byteLength>0?e.enqueue(t):e.close()}catch(t){e.error(t)}}})}writable(e){const t=new h.Writer({database:this.database,semaphore:this.semaphore,key:e});return new n.Writable({start:()=>t.prepare(),write:e=>t.write(e),close:()=>t.close()})}async read(...e){const t=e[0],r=e[1],n=this.readable(t),i=[];for await(const e of n)i.push(e);return r?s.Buffer.concat(i).toString(r):s.Buffer.concat(i)}async readBlob(e){return this.semaphore.run(async()=>{if(!await this.database.exists(o.FileStore,e))throw new u.FileNotFoundError(e);const t=(await this.database.get(o.FileStore,e)).blobs.map(async t=>{const r=await this.database.get(o.BlobStore,t);if(!r)throw new u.BlobNotFound(e,t);return r.blob});return new Blob(await Promise.all(t))})}async append(...e){const t=e[0],r=e[1],n=e[2],i=n?s.Buffer.from(r,n):s.Buffer.from(r),a=this.writable(t);await a.write(i),await a.close()}async write(...e){const t=e[0],r=e[1],n=e[2],i=n?s.Buffer.from(r,n):s.Buffer.from(r);await this.delete(t);const a=this.writable(t);await a.write(i),await a.close()}async delete(e){if(await this.database.exists(o.FileStore,e)){const t=await this.database.get(o.FileStore,e);this.database.delete(o.FileStore,e);for(const e of t.blobs)this.database.delete(o.BlobStore,e);await this.database.commit()}}async dispose(){return this.semaphore.run(()=>this.database.dispose())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(1),i=r(15),a=r(8);t.Reader=class{constructor(e){this.database=e.database,this.semaphore=e.semaphore,this.key=e.key,this.barrier=new s.Barrier,this.blob=new Blob([]),this.chunkSize=65536,this.start=e.start||0,this.end=e.end||1/0,this.offset=this.start}async prepare(){return this.semaphore.run(async()=>{if(!await this.database.exists(a.FileStore,this.key))throw new i.FileNotFoundError(this.key);const e=(await this.database.get(a.FileStore,this.key)).blobs.map(async e=>{const t=await this.database.get(a.BlobStore,e);if(!t)throw new i.BlobNotFound(this.key,e);return t.blob});return this.blob=new Blob(await Promise.all(e)),this.barrier.resume()})}read(){return this.execute(async()=>{let e=this.offset,t=e+this.chunkSize;e>=this.end&&(e=this.end),t>=this.end&&(t=this.end);const r=await this.readBuffer(e,t);return this.offset+=this.chunkSize,r})}readBuffer(e,t){return new Promise((r,s)=>{const i=new FileReader;i.addEventListener("progress",e=>{}),i.addEventListener("loadend",e=>r(n.Buffer.from(e.target.result))),i.addEventListener("error",e=>s(e)),i.readAsArrayBuffer(this.blob.slice(e,t))})}execute(e){return this.barrier.run(()=>e())}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(1),i=r(8);class a{constructor(){this.buffers=[]}size(){return this.buffers.reduce((e,t)=>e+t.byteLength,0)}write(e){this.buffers.push(e)}read(e){let t=0;const r=[];for(;this.buffers.length>0&&t<=e;){let e=this.buffers.shift();t+=e.length,r.push(e)}const s=n.Buffer.concat(r),i=s.slice(0,e),a=s.slice(e);return a.length>0&&this.buffers.unshift(a),i}}t.Writer=class{constructor(e){const t=e.key,r=new Date,n=new Date;this.file={key:t,blobs:[],created:r,updated:n,size:0},this.database=e.database,this.semaphore=e.semaphore,this.highWaterMark=8e6,this.buffer=new a,this.barrier=new s.Barrier}prepare(){return this.semaphore.run(async()=>{await this.database.exists(i.FileStore,this.file.key)?this.file=await this.database.get(i.FileStore,this.file.key):(this.database.insert(i.FileStore,this.file),await this.database.commit()),this.barrier.resume()})}write(e){return this.execute(async()=>{if(this.buffer.write(e),!(this.buffer.size()<this.highWaterMark)){for(;this.buffer.size()>this.highWaterMark;){const e=this.buffer.read(this.highWaterMark),t=this.database.key(),r=new Blob([e]);this.file.size+=e.byteLength,this.file.updated=new Date,this.file.blobs=[...this.file.blobs,t],this.database.insert(i.BlobStore,{key:t,blob:r}),this.database.update(i.FileStore,this.file)}await this.database.commit()}})}flush(){return this.execute(async()=>{if(0!==this.buffer.size()){for(;this.buffer.size()>0;){const e=this.buffer.read(this.highWaterMark),t=this.database.key(),r=new Blob([e]);this.file.size+=e.byteLength,this.file.updated=new Date,this.file.blobs=[...this.file.blobs,t],this.database.insert(i.BlobStore,{key:t,blob:r}),this.database.update(i.FileStore,this.file)}await this.database.commit()}})}async close(){await this.flush()}execute(e){return this.barrier.run(()=>this.semaphore.run(()=>e()))}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(18),n=r(53);t.PageHubServer=class{constructor(e){this.configuration=e,this.sockets=new Map,this.dhcp=new n.Dhcp}onConnection(e){const t=this.configuration,r=this.dhcp.next();e.on("message",e=>this.onMessage(r,e)),e.on("error",e=>this.onError(r,e)),e.on("close",()=>this.onClose(r)),e.send(JSON.stringify({type:"binding",address:r,configuration:t})),this.sockets.set(r,e)}onMessage(e,t){try{const r=JSON.parse(t.data);switch(r.type){case"forward":return this.onForward(e,r)}}catch{this.sockets.get(e).close(),this.sockets.delete(e)}}onForward(e,t){if(this.sockets.has(t.to)){const r=this.sockets.get(t.to),s="forward",n=e,i=t.to,a=t.data;r.send(JSON.stringify({type:s,from:n,to:i,data:a}))}}onError(e,t){console.error(e,t)}onClose(e){this.sockets.delete(e)}listen(e){this.server=s.createServer(e=>{this.onConnection(e)}).listen(e)}dispose(){this.server.dispose()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(19),n=r(20);t.Server=class{constructor(e){this.func=e,this.channel=0,this.sockets=new Map}listen(e){return s.Bus.on(`${e}:server:connect`,t=>{const r=this.channel,i=new n.Socket(t=>setTimeout(()=>{s.Bus.emit(`${e}:${r}:client:message`,t)},0),()=>setTimeout(()=>{s.Bus.emit(`${e}:${r}:client:close`),i.dispose()},0));s.Bus.on(`${e}:${r}:server:message`,e=>{i.emit("message",{data:e})}),s.Bus.on(`${e}:${r}:server:close`,()=>{this.sockets.delete(r),i.emit("close"),i.dispose()}),this.sockets.set(r,i),s.Bus.emit(`${e}:client:connect`,r),this.func(i),this.channel+=1}),this}dispose(){for(const e of this.sockets.keys()){const t=this.sockets.get(e);t.emit("close"),t.dispose(),this.sockets.delete(e)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.Dhcp=class{constructor(){this.element=new Uint32Array(1),this.element[0]=0}next(){const e=[...new Uint8Array(this.element.buffer)].join(".");return this.element[0]+=1,e}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(0),i=r(18);t.PageHub=class extends s.Events{constructor(e){super(),this.port=e,this.barrier=new n.Barrier,this.socket=i.connect(this.port),this.socket.on("message",e=>this.onMessage(e)),this.socket.on("error",e=>this.onError(e)),this.socket.on("close",()=>this.onClose())}on(e,t){super.on(e,t)}configuration(){return this.barrier.run(()=>this.binding.configuration)}address(){return this.barrier.run(()=>this.binding.address)}forward(e,t){return this.barrier.run(()=>{const r=this.binding.address;this.socket.send(JSON.stringify({to:e,from:r,type:"forward",data:t}))})}onMessage(e){const t=JSON.parse(e.data);switch(t.type){case"binding":this.onBinding(t);break;case"forward":this.onForward(t)}}onBinding(e){this.binding=e,this.barrier.resume()}onForward(e){super.emit("forward",e)}onClose(){this.barrier.pause()}onError(e){super.emit("error",e)}dispose(){this.socket.dispose(),super.dispose()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(56);t.NetworkHub=s.NetworkHub},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(0),n=r(0);t.NetworkHub=class extends s.Events{constructor(e){super(),this.endpoint=e,this.barrier=new n.Barrier,this.socket=new WebSocket(this.endpoint),this.socket.addEventListener("message",e=>this.onMessage(e)),this.socket.addEventListener("error",e=>this.onError(e)),this.socket.addEventListener("close",()=>this.onClose())}on(e,t){super.on(e,t)}configuration(){return this.barrier.run(()=>this.binding.configuration)}address(){return this.barrier.run(()=>this.binding.address)}forward(e,t){return this.barrier.run(()=>{const r=this.binding.address;this.socket.send(JSON.stringify({to:e,from:r,type:"forward",data:t}))})}onMessage(e){const t=JSON.parse(e.data);switch(t.type){case"binding":this.onBinding(t);break;case"forward":this.onForward(t)}}onBinding(e){this.binding=e,this.barrier.resume()}onForward(e){super.emit("forward",e)}onClose(){this.barrier.pause()}onError(e){super.emit("error",e)}dispose(){this.socket.close()}}},function(e,t,r){"use strict";function s(e,t="timeout"){return new Promise((r,s)=>{setTimeout(()=>s(new Error(t)),e)})}function n(e,t){return new Promise(r=>{e.addEventListener(t,function s(n){e.removeEventListener(t,s),r(n)})})}var i;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.None=0]="None",e[e.Sender=1]="Sender",e[e.Receiver=2]="Receiver"}(i||(i={}));const a=e=>e===i.Receiver?i.Sender:e===i.Sender?i.Receiver:e;class o extends Error{constructor(e,t,r,s){super(`local: ${e} remote: ${t} error: ${r.message}`),this.local=e,this.remote=t,this.error=r,this.sdp=s}}t.NegotiateError=o;t.SignallingError=class extends Error{constructor(e,t){super(`remote: ${e} error: ${t.message}`),this.remote=e,this.error=t}};class c extends Error{constructor(e){super(`The port '${e}' is already in use.`),this.port=e}}t.PortInUseError=c;t.Network=class{constructor(e){this.hub=e,this.hub.on("forward",e=>this.onForward(e)),this.ports=new Map,this.peers=new Map,this.createLoopback()}address(){return this.hub.address()}getPeers(){return this.peers}async connect(e,t){e=e===await this.hub.address()||"localhost"===e?"localhost:1":e;const r=await this.getPeer(e),i=r.connection.createDataChannel(t);if(i.binaryType="arraybuffer",await Promise.race([s(4e3,`Connection to host '${r.remote}' timed out.`),n(i,"open")]),1===(await Promise.race([s(4e3,`${r.remote}' is not responding.`),n(i,"message")]).then(e=>new Uint8Array(e.data)))[0])throw i.close(),Error(`'${r.remote}' forcefully closed this connection.`);return[r,i]}bindPort(e,t){if(this.ports.has(e))throw new c(e);this.ports.set(e,t)}unbindPort(e){this.ports.delete(e)}dispose(){for(const e of this.peers.keys())this.peers.get(e).connection.close(),this.peers.delete(e)}async getPeer(e){const t=await this.hub.configuration(),r=await this.hub.address();if(!this.peers.has(e)){const s=new RTCPeerConnection(t),n={connection:s,local:r,remote:e,loopback:i.None};s.addEventListener("negotiationneeded",e=>this.onNegotiationNeeded(n,e)),s.addEventListener("icecandidate",e=>this.onIceCandidate(n,e)),s.addEventListener("datachannel",e=>this.onDataChannel(n,e)),this.peers.set(e,n)}return this.peers.get(e)}async forward(e,t){if("localhost"===e){const e="forward",r="localhost",s="localhost";return this.onForward({type:e,to:s,from:r,data:t})}this.hub.forward(e,t)}onForward(e){switch(e.data.type){case"candidate":this.onCandidate(e);break;case"answer":this.onAnswer(e);break;case"offer":this.onOffer(e)}}async onOffer(e){try{const t=await this.getPeer(this.resolveLoopbackTarget(e));await t.connection.setRemoteDescription(e.data.sdp);const r=await t.connection.createAnswer(),s=a(e.data.loopback);await t.connection.setLocalDescription(r),await this.forward(e.from,{type:"answer",sdp:r,loopback:s})}catch(t){const r=e.to,s=e.from;console.warn(new o(r,s,t,e.data.sdp))}}async onAnswer(e){try{const t=await this.getPeer(this.resolveLoopbackTarget(e));await t.connection.setRemoteDescription(e.data.sdp)}catch(t){console.warn(new o(e.to,e.from,t,e.data.sdp))}}async onCandidate(e){try{const t=await this.getPeer(this.resolveLoopbackTarget(e));await t.connection.addIceCandidate(e.data.candidate)}catch(t){console.warn(new o(e.to,e.from,t,e.data.candidate))}}async onNegotiationNeeded(e,t){try{const t=await e.connection.createOffer(),r=e.loopback;await e.connection.setLocalDescription(t),await this.forward(e.remote,{type:"offer",sdp:t,loopback:r})}catch(t){const r=e.local,s=e.remote;console.warn(new o(r,s,t))}}onIceCandidate(e,t){if(null!==t.candidate)try{const r=t.candidate,s=e.loopback;this.forward(e.remote,{type:"candidate",candidate:r,loopback:s})}catch(t){console.error(new o(e.local,e.remote,t))}}async onDataChannel(e,t){const r=t.channel.label,i=t.channel;i.binaryType="arraybuffer";try{await Promise.race([s(2e3,`Received connection from ${e.remote} failed to open.`),n(i,"open")]),this.ports.has(r)?(i.send(new Uint8Array([0])),this.ports.get(r)([e,i])):(i.send(new Uint8Array([1])),i.close())}catch{}}createLoopback(){{const e=new RTCPeerConnection,t={connection:e,local:"localhost",remote:"localhost",loopback:i.Sender};e.addEventListener("negotiationneeded",e=>this.onNegotiationNeeded(t,e)),e.addEventListener("icecandidate",e=>this.onIceCandidate(t,e)),e.addEventListener("datachannel",e=>this.onDataChannel(t,e)),this.peers.set("localhost:0",t)}{const e=new RTCPeerConnection,t={connection:e,local:"localhost",remote:"localhost",loopback:i.Receiver};e.addEventListener("negotiationneeded",e=>this.onNegotiationNeeded(t,e)),e.addEventListener("icecandidate",e=>this.onIceCandidate(t,e)),e.addEventListener("datachannel",e=>this.onDataChannel(t,e)),this.peers.set("localhost:1",t)}}resolveLoopbackTarget(e){return e.data.loopback===i.Sender?"localhost:1":e.data.loopback===i.Receiver?"localhost:0":e.from}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(9),n=r(22);t.Sockets=class{constructor(e){this.net=e,this.servers=[]}createServer(e){const t=new n.SocketServer(this.net,e);return this.servers.push(t),t}connect(e,t){return s.Socket.createSocket(this.net,e,t.toString())}dispose(){for(;this.servers.length>0;)this.servers.shift().dispose()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1),n=r(0),i=r(2),a=0,o=1,c=2,h=3,u=4;t.NetworkStream=class{constructor(e,t=8e3){this.socket=e,this.timeout=t,this.read_buffer=[],this.read_barrier=new n.Barrier,this.readable=new i.Readable({cancel:()=>this.push(o),pull:async e=>{this.push(a),await this.read_barrier.run(()=>{this.read_barrier.pause();const[t,r]=this.read_buffer.shift();try{switch(t){case c:return e.enqueue(r);case u:return e.close();case h:throw new Error(r.toString());default:throw new Error(`Readable receive invalid header. ${t}`)}}catch(t){return e.error(t)}})}}),this.write_buffer=[],this.write_barrier=new n.Barrier,this.writable=new i.Writable({write:async e=>{const[t]=await this.next();switch(t){case o:throw Error("Readable cancelled");case a:return this.push(c,e)}},abort:async e=>{const[t]=await this.next();switch(t){case o:throw Error("Readable cancelled");case a:return this.push(h,s.Buffer.from(e.message))}},close:async()=>{const[e]=await this.next();switch(e){case o:throw Error("Readable cancelled");case a:return this.push(u)}}}),this.readInternal()}next(){return new Promise((e,t)=>{const r=setTimeout(()=>{t(new Error("Network send timeout.")),this.socket.close()},this.timeout);return this.write_barrier.run(()=>{clearTimeout(r),this.write_barrier.pause();const t=this.write_buffer.shift();e(t)})})}push(e,t=s.Buffer.alloc(0)){this.socket.send(s.Buffer.concat([s.Buffer.from([e]),s.Buffer.from(t)]))}pull(){return new Promise(e=>{setTimeout(()=>e([h,s.Buffer.from("Network receive timeout.")]),this.timeout),this.socket.once("error",()=>e([h,s.Buffer.from("NetworkStream Socket encounted error.")])),this.socket.once("close",()=>e([u,s.Buffer.alloc(0)])),this.socket.once("message",t=>{const r=s.Buffer.from(t.data),n=r.readInt8(0),i=r.slice(1);switch(n){case a:return e([a,s.Buffer.alloc(0)]);case o:return e([o,s.Buffer.alloc(0)]);case c:return e([c,i]);case h:return e([h,i]);case u:return e([u,s.Buffer.alloc(0)]);default:return e([h,s.Buffer.from("NetworkStream Socket sent unknown message header.")])}})})}async readInternal(){let e=!0;for(;e;){const t=await this.pull();switch(t[0]){case a:this.write_buffer.push(t),this.write_barrier.resume();break;case o:this.write_buffer.push(t),this.write_barrier.resume(),e=!1;break;case c:this.read_buffer.push(t),this.read_barrier.resume();break;case u:case h:this.read_buffer.push(t),this.read_barrier.resume(),e=!1}}this.socket.close()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(10),n=r(27);t.Rest=class{constructor(e){this.sockets=e,this.servers=[]}createServer(e){const t=new s.RestServer(this.sockets,e);return this.servers.push(t),t}async fetch(e,t={method:"get",headers:{}}){return new n.Fetch(this.sockets).fetch(e,t)}dispose(){for(;this.servers.length>0;)this.servers.shift().dispose()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.asMiddleware=function(e){if("function"==typeof e)return{handle:e};return e},t.runStack=function e(t,r,s,n){return t.length>0?t.shift().handle(r,s,()=>e(t,r,s,n)):n()}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});class s{constructor(e){this.pattern=e,this.results=s.parsePattern(this.pattern),this.regex=s.buildRegex(this.results),this.params=s.buildParams(this.results)}match(e){const t=e.match(this.regex);if(t)return this.params.reduce((e,r,s)=>(e[r]=t[s+1],e),{})}static parsePattern(e){const t=e.split(""),r=[];let s="literal",n=[];for(;t.length>0;){const i=t.shift();if("?"===i||"&"===i)throw Error(`Illegal character '${i}' in pattern '${e}'`);if("literal"!==s||":"===i)if(":"!==i)if("param"!==s||"/"!==i&&"-"!==i)n.push(i);else{const e="param",t=n.join("");r.push({type:e,value:t}),s="literal",(n=[]).push(i)}else{const e="literal",t=n.join("");r.push({type:e,value:t}),s="param",n=[]}else n.push(i)}if(n.length>0){const e=s,t=n.join("");r.push({type:e,value:t})}return r}static buildRegex(e){const t=e.map(e=>"param"===e.type?"([\\w-_$]*)":e.value).join("");return new RegExp(`^${t}$`)}static buildParams(e){return e.filter(e=>"param"===e.type).map(e=>e.value)}}t.Pattern=s},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(1);class n extends Error{constructor(){super("Server closed without sending a header.")}}t.ResponseHeaderNotReceivedError=n;class i extends Error{constructor(){super("Server sent an invalid request header.")}}t.ResponseHeaderInvalidError=i;class a extends Error{constructor(){super("Client sent an invalid request header.")}}t.RequestHeaderInvalidError=a;t.HeaderProtocol=class{static async writeRequestHeader(e,t){await e.writable.write(s.Buffer.from(JSON.stringify(t)))}static async readRequestHeader(e){const t=await e.readable.read();if(t.done)throw new a;const r=JSON.parse(t.value.toString());if(void 0===r.url||"string"!=typeof r.url)throw new a;if(void 0===r.method||"string"!=typeof r.method)throw new a;if(void 0===r.headers||"object"!=typeof r.headers)throw new a;return r}static async writeResponseHeader(e,t){await e.writable.write(s.Buffer.from(JSON.stringify(t)))}static async readResponseHeader(e){const{done:t,value:r}=await e.readable.read();if(t)throw new n;const s=JSON.parse(r.toString());if(void 0===s.status)throw new i;if(void 0===s.headers)throw new i;return s}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(7),n=r(2),i=r(1),a=65536;t.BodyProtocol=class{static partition(e,t){const r=i.Buffer.concat(e),s=[];let n=0;for(;;){const e=r.slice(n,n+t);if(n+=e.length,!(e.length>0))break;s.push(e)}return s}static async writeReadable(e,t,r={ignoreError:!1}){try{const s=i.Buffer.alloc(0);let n=s;for await(const r of t){const t=this.partition([n,r],a);n=s;for(const r of t)r.length===a?await e.writable.write(r):n=r}n.length>0&&await e.writable.write(n),await e.writable.write(i.Buffer.alloc(0))}catch(e){if(!r.ignoreError)throw e}}static readReadable(e){return new n.Readable({pull:async t=>{try{const r=(await e.readable.read()).value;0===r.length?t.close():t.enqueue(r)}catch(e){t.error(new Error("Unable to read from this stream."))}}})}static async writeQueryable(e,t,r={ignoreError:!1}){try{for await(const r of t){const t=JSON.stringify(r),s=i.Buffer.from(t,"utf-8");await e.writable.write(s)}await e.writable.write(i.Buffer.alloc(0))}catch(e){if(!r.ignoreError)throw e}}static readQueryable(e){return new s.Queryable(async function*(e){for await(const t of e.readable){if(0===t.length)break;const e=t.toString("utf-8"),r=JSON.parse(e);yield r}}(e))}static async writeMediaStream(e,t,r={ignoreError:!1}){try{await e.writable.write(i.Buffer.from("mediastream"));for(const r of t.getTracks())await e.socket.addTrack(r,t);await e.writable.write(i.Buffer.alloc(0))}catch(e){if(!r.ignoreError)throw e}}static async readMediaStream(e){const[t,r]=await async function(){const{value:t}=await e.readable.read(),{value:r}=await e.readable.read();return[t,r]}();if("mediastream"!==t.toString()&&0!==r.length)throw Error("Unable to read mediastream. Sender sent invalid data.");const s=await function(e,t){return new Promise((r,s)=>{setTimeout(()=>s(new Error("MediaStream receive timeout.")),t),e.socket.once("track",e=>r(e.streams[0]))})}(e,4e3);return async function(){for await(const t of e.readable);}(),s}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(4),n=r(3),i=r(25),a=r(26),o=r(24),c=4e3;t.RestServer=class extends o.Router{constructor(e,t){super(),this.sockets=e,this.options=t,this.options=this.options||{},this.options.timeout=this.options.timeout||c}listen(e){return this.server=this.sockets.createServer(e=>this.onSocket(e)),this.server.listen(e),this}dispose(){this.server.dispose()}async onSocket(e){const t=new s.NetworkStream(e,this.options.timeout),r=new a.RestResponse(t);try{const e=await n.HeaderProtocol.readRequestHeader(t),s=new i.RestRequest(t,e);this.handle(s,r,()=>{r.text("not found",404)})}catch(e){r.text("internal server error",500)}}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(6),n=r(1),i=r(2),a=r(4),o=r(28),c=r(29);class h extends Error{constructor(e){super(e)}}t.FetchUrlError=h;t.FetchReadError=class extends Error{constructor(e,t){super(`Cannot read a '${e}' from a '${t}' response.`)}};t.Fetch=class{constructor(e){this.sockets=e}createReadable(e){const t=e.length>0?[e]:[];return new i.Readable({pull:e=>{if(t.length>0){const r=t.shift();e.enqueue(r)}else e.close()}})}resolveBodyAsReadable(e){if(void 0===e)return this.createReadable(n.Buffer.alloc(0));if(e instanceof i.Readable)return e;if(e instanceof Uint8Array)return this.createReadable(e);if(e instanceof ArrayBuffer)return this.createReadable(n.Buffer.from(e));if("string"==typeof e)return this.createReadable(n.Buffer.from(e));{const t=JSON.stringify(e);return this.createReadable(n.Buffer.from(t))}}async connect(e,t){return new Promise((r,s)=>{const n=this.sockets.connect(e,t);n.once("error",e=>s(e)),n.once("close",()=>s(new Error("Fetch socket closed unexpectedly."))),n.once("open",()=>r(n))})}async fetch(e,t){(t=t||{}).method=t.method||"get",t.headers=t.headers||{};const r=s.Url.parse(e);if(r.protocol&&"rest:"!==r.protocol)throw new h("Can only fetch with 'rest:// protocols.'");if(null===r.path)throw new h(`The fetch URL '${r.path}' is invalid.`);const n=r.path,i=r.host||"localhost",u=r.port||"80",l=t.method||"get",f=t.headers||{},d=this.resolveBodyAsReadable(t.body),p=new a.NetworkStream(await this.connect(i,u)),w=new o.FetchRequest(p,{url:n,method:l,headers:f},d),b=await w.getResponse();return new c.FetchResponse(p,b)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(12),n=r(16),i=r(21),a=r(4),o=r(23),c=r(68);new n.PageHubServer({}).listen(0);t.Node=class{constructor(e){this.options=e,e=e||{},this.hub=e.hub||new n.PageHub(0),this.network=new i.Network(this.hub),this.system=new s.System(this.network),this.sockets=new a.Sockets(this.network),this.rest=new o.Rest(this.sockets),this.media=new c.Media}address(){return this.hub.address()}async dispose(){await this.rest.dispose(),await this.sockets.dispose(),await this.network.dispose()}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var s=r(69);t.Media=s.Media},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const s=r(70),n=r(71);t.Media=class{createTestPattern(){return s.WebRTC.createTestPattern()}createMediaSource(e,t){return n.MediaSourceExtensions.createMediaSource(e,t)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.WebRTC=class{static createTestPattern(){const e=document.createElement("canvas");e.width=1024,e.height=768;const t=e.getContext("2d");return setInterval(()=>{const e=Math.floor(255*Math.random()),r=Math.floor(255*Math.random()),s=Math.floor(255*Math.random());t.fillStyle=`rgb(${e}, ${r}, ${s})`,t.fillRect(0,0,100,100)},10),e.captureStream(30)}}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.MediaSourceExtensions=class{static resolveCodec(e){switch(e){case"mp4":return'video/mp4; codecs="avc1.640029, mp4a.40.5"';case"webm":return'video/webm; codecs="vp8, vorbis"';default:throw Error(`Unknown media codec type ${e}`)}}static async writeSourceBuffer(e,t){const{done:r,value:s}=await e.read();return r?0:(t.appendBuffer(s),s.length)}static createMediaSource(e,t){const r=new MediaSource;return r.addEventListener("sourceopen",async()=>{const s=r.addSourceBuffer(this.resolveCodec(t));s.mode="sequence",s.addEventListener("updateend",async()=>{0===await this.writeSourceBuffer(e,s)&&r.endOfStream()}),0===await this.writeSourceBuffer(e,s)&&r.endOfStream()}),r}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,